script#job-configure(type="text/x-template")
  div
    app-content-title(:title="'Configure ' + job_name + ' (' + job_id + ')'")

    job-upsert(
      :is_update="true",
      :job_id="job_id",
      :job_name="job_name",
      @update-job-name="updateJobName"

      :job_template="job_template",
      @update-job-template="updateJobTemplate"

      :job_variables="job_variables"
      @update-job-variables="updateJobVariables"

      @refresh-jobs="refreshJobs"
    )

script.
  const JobConfigureComponent = Vue.component ('job-configure', {
    template : '#job-configure',
    data : function () {
      return {
        template_focused : false,
        data_changed : false,
        job_id : false,
        job_name : '',
        job_template : '',
        job_variables : []
      };
    },
    created : function () {
      this.fetchJobInfo()
    },
    watch: {
      // reload data if users selects another job
      "$route.params.job_name" : function() {
        this.fetchJobInfo()
      }
    },
    methods : {
      fetchJobInfo : function () {
        const self = this;
        fetch('/api/jobs/get/' + this.$route.params.job_name).then (function (response) {
          // (response.status === 200)
          response.json().then (function (job) {
            self.job_id = job.id;
            self.job_name = job.name;
            self.job_template = job.template;
            Vue.set (self, 'job_variables', job.variables);
            self.data_changed = false;
          })
        });
      },
      refreshJobs (page) {
        this.$emit ('refresh-jobs', page)
      },

      // called from children
      updateJobName (val) {
        if (this.job_name != val)
          this.data_changed = true;
      },
      updateJobTemplate (val) {
        if (this.job_template != val)
          this.data_changed = true;
      },
      updateJobVariables (val) {
        // if (JSON.stringify(this.job_variables) != JSON.stringify(val))
        this.data_changed = true;
      }
    },

    /*
    // before navigating away, make sure the user is not going to lose changes
    beforeRouteLeave : function (to, from, next) {
      if (!this.data_changed) {
        return next();
      }

      const answer = window.confirm('You have unsaved changes. Are you fine losing them?')
      next(answer);
    }*/
  });