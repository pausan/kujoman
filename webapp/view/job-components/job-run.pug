script#job-run(type="text/x-template")
  div
    app-content-title(:title="'Create ' + job.name + ' (' + job.id + ')'")
    .row
      .col
        p
        | Set the desired values/ranges for all the variables used on this job template.
        | You'll spawn as many jobs as if you were looping through all ranges.
        p All jobs will be enqueued once created (the order is not guaranteed).

    .row.mt-4
      .col
        .form-template-vars(v-for="(tvar, tvarIndex) in variables")
          .form-row(v-if="tvar.range")
            .col-2
              label.ml-2 {{ tvar.name }}

            .col-1.align-right
              label from:

            .col-2
              input.form-control(v-model="tvar.start", :type="tvar.htmltype", required)

            .col-1.align-right
              label to:

            .col-2
              input.form-control(v-model="tvar.end", :type="tvar.htmltype", required)

            .col-2.text
              span ( {{ tvar.type }} )

            .col-2.align-right
              .btn.btn-outline-primary(@click="disableRange(tvarIndex)")
                i.fas.fa-long-arrow-alt-left.mr-2
                | to fixed

          .form-row(v-else)
            .col-2
              label.ml-2 {{ tvar.name }}

            .col-1.align-right
              label value:

            .col-2
              input.form-control(v-model="tvar.value", :type="tvar.htmltype", required)

            .col-2.text
              span ( {{ tvar.type }} )

            .col-5.align-right
              .btn.btn-outline-primary(@click="enableRange(tvarIndex)")
                i.fas.fa-long-arrow-alt-right.mr-2
                | to range

    .row.mt-4.mb-1
      .col-2
        | Total: {{ expanded_job_count }} jobs

      .offset-8.col-2.align-right
          .btn.btn-outline-info.btn-sm(@click="updateJobSelection (-1)")
            i.fas.fa-angle-left

          span.ml-4.mr-4
            | Job {{ expanded_job_index + 1 }} of {{ expanded_job_count }}

          .btn.btn-outline-info.btn-sm(@click="updateJobSelection (+1)")
            i.fas.fa-angle-right

    .row.mb-4
      .col
        pre.alert.alert-info
          | {{ expanded_job_selected }}

    .row(v-if="action_in_progress")
      .col
        .btn.btn-large.btn-outline-warning
          .fas.fa-spinner.fa-spin.mr-2
          | Working...

    .row(v-else)
      .col
        .btn.btn-success(@click="createJobs")
          span Create &amp; Run {{ expanded_job_count }} Jobs
            i.fas.fa-play-circle.ml-2

script.
  const JobRunComponent = Vue.component ('job-run', {
    template : '#job-run',
    data : function () {
      return {
        job : { template : '' },
        variables : [],

        action_in_progress : false,

        expanded_jobs         : [],
        expanded_job_count    : 1,
        expanded_job_selected : '',
        expanded_job_index    : 0
      };
    },
    created : function () {
      this.fetchJobInfo()
    },
    watch: {
      variables : {
        handler(old, newval) {
          this.expanded_job_count = jobVariablesExpandedCount (this.variables);

          if (this.expanded_job_count < 10000) {
            this.expanded_jobs = jobTemplateExpandVariables (
              this.job.template,
              this.variables
            );
          }
          else {
            this.expanded_jobs = [];
          }

          this.updateJobSelection(0);
        },
        deep: true
      },

      // reload data if users selects another job
      "$route.params.job_id" : function() {
        this.fetchJobInfo()
      }
    },
    methods : {
      enableRange : function (index) {
        Vue.set (this.variables[index], 'range', true);
        Vue.set (this.variables[index], 'start', this.variables[index].value);
        Vue.set (this.variables[index], 'end',   this.variables[index].value);
      },

      disableRange : function (index) {
        Vue.set (this.variables[index], 'range', false);
        Vue.set (this.variables[index], 'value', this.variables[index].start);
      },

      // -----------------------------------------------------------------------
      // createJobs
      // -----------------------------------------------------------------------
      createJobs : function () {
        const self = this;
        self.action_in_progress = true;

        fetch('/api/jobs/run/' + self.job.id, {
            method: 'post',
            headers: {
              'Accept'      : 'application/json, text/plain, */*',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              template  : self.job.template,
              variables : self.variables
            })
          })
          .then(res => res.json())
          .then(res => {
            self.action_in_progress = false;
            if (res.ok) {
              // FIXME!
              // this.$emit ('reset-defaults');
            }
            else {
              self.error_message = res.message;
            }
          });
      },

      fetchJobInfo : function () {
        const self = this;
        fetch('/api/jobs/get/' + this.$route.params.job_id).then (function (response) {
          // (response.status === 200)
          response.json().then (function (data) {
            // prepare values with the defaults & set HTML5 type
            for (let [index, tvar] of data.variables.entries()) {
              tvar.htmltype = getHtml5TypeForJobDataType(tvar.type);

              if (tvar.range) {
                tvar.start = tvar.end = tvar.default;
              }
              else {
                tvar.value = tvar.default;
              }

              Vue.set (self.variables, index, tvar);
            }

            self.job = data;
          })
        });
      },

      updateJobSelection : function (increment) {
        // adjust increment & boundaries
        if (
          ((this.expanded_job_index + increment) < this.expanded_jobs.length) &&
          ((this.expanded_job_index + increment) >= 0)
        ) {
          this.expanded_job_index += increment;
        }

        // update selection message
        if (this.expanded_job_count > 10000) {
          this.expanded_job_selected = "Woops! More than 10k jobs created, we won't show that in the browser";
          return;
        }

        if (this.expanded_job_index >= this.expanded_job_count)
          this.expanded_job_index = this.expanded_job_count - 1;

        this.expanded_job_selected = this.expanded_jobs[this.expanded_job_index];
      }
    }
  });
